<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hangfire.Mongo</name>
    </assembly>
    <members>
        <member name="T:Hangfire.Mongo.CheckQueuedJobsStrategy">
            <summary>
            Determines Hangfire.Mongo's behavior for checking if jobs are enqueued
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.CheckQueuedJobsStrategy.Poll">
            <summary>
            Will poll periodically using 'QueuePollInterval',
            recommended for large installments.
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.CheckQueuedJobsStrategy.Watch">
            <summary>
            Use change streams to watch for enqueued jobs. Default setting.
            Will still poll using 'QueuePollInterval'.
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.CheckQueuedJobsStrategy.TailNotificationsCollection">
            <summary>
            Use a capped, tailable collection to notify nodes of enqueued jobs.
            Will still poll using 'QueuePollInterval'.
            Works with single node and test setups.
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosBootstrapperConfigurationExtensions">
            <summary>
            Represents extensions to configure CosmosDB storage for Hangfire
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosBootstrapperConfigurationExtensions.UseCosmosStorage(Hangfire.IGlobalConfiguration,MongoDB.Driver.IMongoClient,System.String,Hangfire.Mongo.CosmosDB.CosmosStorageOptions)">
            <summary>
            Configure Hangfire to use CosmosDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="mongoClient">Client for Mongo</param>
            <param name="databaseName">Name of database at Cosmos server</param>
            <param name="storageOptions">Storage options</param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosConnection">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosConnection.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosConnection.GetUtcDateTime">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosDbWriteOnlyTransaction.ExecuteCommit(MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument},System.Collections.Generic.List{MongoDB.Driver.WriteModel{MongoDB.Bson.BsonDocument}},MongoDB.Driver.BulkWriteOptions)">
            <summary>
            check if we are inserting a Job, add the "Key" field as this is required in cosmos as there is
            unique index for this field
            </summary>
            <param name="jobGraph"></param>
            <param name="writeModels"></param>
            <param name="bulkWriteOptions"></param>
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosFactory">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosFactory.CreateMongoWriteOnlyTransaction(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosFactory.CreateMongoConnection(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosFactory.CreateMongoJobQueueWatcher(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosQueueWatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosQueueWatcher.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,Hangfire.Mongo.IJobQueueSemaphore)">
            <summary>
            ctor
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <param name="jobQueueSemaphore"></param>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosQueueWatcher.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosStorage">
            <summary>
            Cosmos DB storage
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosStorage.#ctor(MongoDB.Driver.IMongoClient,System.String,Hangfire.Mongo.CosmosDB.CosmosStorageOptions)">
            <summary>
            Storage for CosmosDB
            </summary>
            <param name="mongoClient"></param>
            <param name="databaseName"></param>
            <param name="storageOptions"></param>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosStorage.GetComponents">
            <summary>
            Returns collection of server components
            </summary>
            <returns>Collection of server components</returns>
        </member>
        <member name="T:Hangfire.Mongo.CosmosDB.CosmosStorageOptions">
            <summary>
            Cosmos storage options
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.CosmosDB.CosmosStorageOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Database.HangfireDbContext">
            <summary>
            Represents Mongo database context for Hangfire
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.Client">
            <summary>
            MongoClient used for this db context instance
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.Database">
            <summary>
            Database instance used for this db context instance
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Database.HangfireDbContext.#ctor(MongoDB.Driver.IMongoClient,System.String,System.String)">
            <summary>
            Constructs context with Mongo client and database name
            </summary>
            <param name="mongoClient"></param>
            <param name="databaseName"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.ConnectionId">
            <summary>
            Mongo database connection identifier
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.Notifications">
            <summary>
            Reference to tailable collection which contains signal dtos for enqueued job items
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.JobGraph">
            <summary>
            Reference to job graph collection
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.DistributedLock">
            <summary>
            Reference to collection which contains distributed locks
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.Schema">
            <summary>
            Reference to collection which contains schemas
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Database.HangfireDbContext.Server">
            <summary>
            Reference to collection which contains servers information
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.DistributedLock.MongoDistributedLock">
            <summary>
            Represents distributed lock implementation for MongoDB
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.#ctor(System.String,System.TimeSpan,Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoDB distributed lock
            </summary>
            <param name="resource">Lock resource</param>
            <param name="timeout">Lock timeout</param>
            <param name="dbContext"></param>
            <param name="storageOptions">Database options</param>
            <exception cref="T:Hangfire.Storage.DistributedLockTimeoutException">Thrown if lock is not acquired within the timeout</exception>
            <exception cref="T:Hangfire.Mongo.DistributedLock.MongoDistributedLockException">Thrown if other mongo specific issue prevented the lock to be acquired</exception>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.AcquireLock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.Dispose">
            <summary>
            Disposes the object
            </summary>
            <exception cref="T:Hangfire.Mongo.DistributedLock.MongoDistributedLockException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.Acquire(System.TimeSpan)">
            <summary>
            Acquire lock
            </summary>
            <param name="timeout"></param>
            <exception cref="T:Hangfire.Storage.DistributedLockTimeoutException"></exception>
            <exception cref="T:Hangfire.Mongo.DistributedLock.MongoDistributedLockException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.CalculateTimeout(System.TimeSpan)">
            <summary>
            Calculates timeout, same as Hangfire.SqlServer
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.Release">
            <summary>
            Release the lock
            </summary>
            <exception cref="T:Hangfire.Mongo.DistributedLock.MongoDistributedLockException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.Cleanup">
            <summary>
            Delete expired locks
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.StartHeartBeat">
            <summary>
            Starts database heartbeat
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLock.Wait(System.String,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.DistributedLock.MongoDistributedLockException">
            <summary>
            Represents exceptions for distributed lock implementation for MongoDB
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLockException.#ctor(System.String)">
            <summary>
            Creates exception
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Hangfire.Mongo.DistributedLock.MongoDistributedLockException.#ctor(System.String,System.Exception)">
            <summary>
            Creates exception with inner exception
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Hangfire.Mongo.Dto.DistributedLockDto">
            <summary>
            Document used for holding a distributed lock in mongo.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.DistributedLockDto.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.DistributedLockDto.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            fills properties from given doc
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Hangfire.Mongo.Dto.DistributedLockDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Dto.DistributedLockDto.Resource">
            <summary>
            The name of the resource being held.
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Dto.DistributedLockDto.ExpireAt">
            <summary>
            The timestamp for when the lock expires.
            This is used if the lock is not maintained or 
            cleaned up by the owner (e.g. process was shut down).
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.DistributedLockDto.Serialize">
            <summary>
            Serializes to BsonDocument
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.Dto.SchemaDto">
            <summary>
            Holds the schema version of the database
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.SchemaDto.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.SchemaDto.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            fills properties from bson doc
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Hangfire.Mongo.Dto.SchemaDto.Version">
            <summary>
            The schema version
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Dto.SchemaDto.Identifier">
            <summary>
            The identifier of the database.
            Will be initialized along with the database
            and will nerver change.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Dto.SchemaDto.Serialize">
            <summary>
            Serializes to BsonDocument
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.Dto.ServerDto.Serialize">
            <summary>
            Serializes to BsonDocument
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.IJobQueueSemaphore">
            <summary>
            Job queue semaphore waits for signal on jobs queued for given queues
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.IJobQueueSemaphore.WaitAny(System.String[],System.Threading.CancellationToken,System.TimeSpan,System.String@,System.Boolean@)">
            <summary>
            Waits for signal on given queues
            </summary>
            <param name="queues"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <param name="queue"></param>
            <param name="timedOut"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.IJobQueueSemaphore.Release(System.String)">
            <summary>
            Releases a semaphore for given queue
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:Hangfire.Mongo.IJobQueueSemaphore.WaitNonBlock(System.String)">
            <summary>
            Tries to release semaphore on given queue in a non-blocking call
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.JobQueueSemaphore">
            <inheritdoc cref="T:Hangfire.Mongo.IJobQueueSemaphore" />
        </member>
        <member name="M:Hangfire.Mongo.JobQueueSemaphore.WaitAny(System.String[],System.Threading.CancellationToken,System.TimeSpan,System.String@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.JobQueueSemaphore.Release(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.JobQueueSemaphore.WaitNonBlock(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.JobQueueSemaphore.ToString">
            <summary>
            to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.JobQueueSemaphore.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.Mongo.Migration.IndexMigration">
            <summary>
            Base for creating a migration which updates/creates indexes
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IndexMigration.TryCreateIndexes(MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument},System.Func{MongoDB.Driver.FieldDefinition{MongoDB.Bson.BsonDocument},MongoDB.Driver.IndexKeysDefinition{MongoDB.Bson.BsonDocument}},System.String[])">
            <summary>
            Create indexes with <paramref name="indexNames"/> in the <paramref name="collection"/>.
            If an index already exists, and it is the same, it will be overwritten.
            If the index is different to an existing index, an exception will be thrown.
            </summary>
            <param name="collection">
            The collection to create indexes in.
            </param>
            <param name="indexType">
            The type of the indexes created.
            </param>
            <param name="indexNames">
            The names of the indexes to create.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the names of the indexes that were created.
            </returns>
            <exception cref="T:MongoDB.Driver.MongoCommandException">
            Thrown if an existing index is attempted changed.
            </exception>
            <example>
            <code>
            collection.TryCreateIndexes(Builders{BsonDocument}.IndexKeys.Descending, "Name")
            </code>
            </example>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IndexMigration.TryCreateUniqueIndexes(MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument},System.Func{MongoDB.Driver.FieldDefinition{MongoDB.Bson.BsonDocument},MongoDB.Driver.IndexKeysDefinition{MongoDB.Bson.BsonDocument}},System.String[])">
            <summary>
            Creates indexes on specified collection
            </summary>
            <param name="collection"></param>
            <param name="indexType"></param>
            <param name="indexNames"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IndexMigration.CreateIndexes(MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument},System.Func{MongoDB.Driver.FieldDefinition{MongoDB.Bson.BsonDocument},MongoDB.Driver.IndexKeysDefinition{MongoDB.Bson.BsonDocument}},System.String[],System.Func{System.String,MongoDB.Driver.CreateIndexOptions})">
            <summary>
            Creates indexes
            </summary>
            <param name="collection"></param>
            <param name="getIndexType"></param>
            <param name="indexNames"></param>
            <param name="createOptions"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IndexMigration.DropExistingIndexes(MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument},System.String[])">
            <summary>
            Drops indexes
            </summary>
            <param name="collection"></param>
            <param name="indexNames"></param>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MigrationLock">
            <summary>
            Migration lock handler
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MigrationLock.#ctor(MongoDB.Driver.IMongoDatabase,System.String,System.TimeSpan)">
            <summary>
            ctor
            </summary>
            <param name="database"></param>
            <param name="migrateLockCollectionPrefix"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MigrationLock.DeleteMigrationLock">
            <summary>
            Deletes migration lock, if any
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MigrationLock.AcquireMigrationAccess">
            <summary>
            Aquires lock or throws TimeoutException
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MigrationLock.Dispose">
            <summary>
            Deletes lock
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.IMongoMigrationContext">
            <summary>
            Context used to store state between migrations
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IMongoMigrationContext.GetItem``1(System.String)">
            <summary>
            Gets item from context environment
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.Migration.IMongoMigrationContext.SetItem``1(System.String,``0)">
            <summary>
            Sets item in migration context environment
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoMigrationContext">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationContext.GetItem``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationContext.SetItem``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoMigrationException">
            <summary>
            Represents exceptions for migrations
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationException.#ctor(Hangfire.Mongo.Migration.Steps.IMongoMigrationStep)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.Mongo.Migration.MongoMigrationException"/> class.
            Generates the message based on the <paramref name="migrationStep"/>
            </summary>
            <param name="migrationStep">
            The migration step that failed.
            </param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationException.#ctor(Hangfire.Mongo.Migration.Steps.IMongoMigrationStep,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.Mongo.Migration.MongoMigrationException"/> class.
            Generates the message based on the <paramref name="migrationStep"/>
            </summary>
            <param name="migrationStep">
            The migration step that failed.
            </param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationException.#ctor(Hangfire.Mongo.Migration.Steps.IMongoMigrationStep,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.Mongo.Migration.MongoMigrationException"/> class.
            Generates the message based on the <paramref name="migrationStep"/>
            </summary>
            <param name="migrationStep">
            The migration step that failed.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.Mongo.Migration.MongoMigrationException"/> class.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.Mongo.Migration.MongoMigrationException"/> class.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoMigrationFactory">
            <summary>
            Creates migration steps
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationFactory.GetOrderedMigrations">
            <summary>
            Returns migration steps by schema, then by sequence 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoMigrationManager">
            <summary>
            Manages migration from one schema version to the required.
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Migration.MongoMigrationManager.RequiredSchemaVersion">
            <summary>
            Gets required schema based on codebase
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationManager.#ctor(Hangfire.Mongo.MongoStorageOptions,MongoDB.Driver.IMongoDatabase)">
            <summary>
            ctor
            </summary>
            <param name="storageOptions"></param>
            <param name="database"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationManager.MigrateIfNeeded(Hangfire.Mongo.MongoStorageOptions,MongoDB.Driver.IMongoDatabase)">
            <summary>
            static convinience wrapper for aquireing lock and running migrations
            </summary>
            <param name="storageOptions"></param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationManager.Migrate(Hangfire.Mongo.Migration.Strategies.Backup.MongoBackupStrategy,Hangfire.Mongo.Migration.Strategies.MongoMigrationStrategy)">
            <summary>
            Runs migrations with given strategies
            </summary>
            <param name="backupStrategy"></param>
            <param name="migrationStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationManager.GetCurrentSchema(MongoDB.Driver.IMongoDatabase)">
            <summary>
            Gets current schema from DB
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoMigrationUtils">
            <summary>
            Utility methods used for migration
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationUtils.ExistingHangfireCollectionNames(MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Find hangfire collection namespaces by reflecting over properties on database.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationUtils.ExistingDatabaseCollectionNames(MongoDB.Driver.IMongoDatabase)">
            <summary>
            Gets the existing collection names from database
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationUtils.GetBackupCollectionName(System.String,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Generate the name of tha tbackup collection based on the original collection name and schema.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoMigrationUtils.GetBackupDatabaseName(System.String,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Generate the name of that backup collection based on the original collection name and schema.
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.MongoSchemaExtensions">
            <summary>
            Helpers for MongoSchema
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.MongoSchemaExtensions.CollectionNames(Hangfire.Mongo.MongoSchema,System.String)">
            <summary>
            Gets collection names for given schema
            </summary>
            <param name="schema"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.IMongoMigrationStep">
            <summary>
            Mongo migration step.
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Migration.Steps.IMongoMigrationStep.TargetSchema">
            <summary>
            The schema this migration step targets.
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.Migration.Steps.IMongoMigrationStep.Sequence">
            <summary>
            Specifies the order migration steps for the same schema is executed.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Steps.IMongoMigrationStep.Execute(MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoStorageOptions,Hangfire.Mongo.Migration.IMongoMigrationContext)">
            <summary>
            Executes the migration step.
            </summary>
            <param name="database">The mongo database.</param>
            <param name="storageOptions">Storage options.</param>
            <param name="migrationContext">Bag for storing data between migration steps</param>
            <returns>True on success, else false</returns>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.RemoveObsoleteCollectionsStep">
            <summary>
            Removes obsolete collections from previous schema to current
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version05.CreateJobIdIndex">
            <summary>
            Create index for statedate collection
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.StateDataCreateIndex">
            <summary>
            Create index for statedate collection
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.JobMigration">
            <summary>
            Migrate jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.ScheduledJobMigration">
            <summary>
            Migrate scheduled jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.RecurringJobMigration">
            <summary>
            Migrate recurrent jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.EnqueuedJobMigration">
            <summary>
            Migrate enqueued jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.CountersMigration">
            <summary>
            Migrate enqueued jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version06.RemoveObsoleteCollections">
            <summary>
            Clean up obsolete collections
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version07.StateDataRename">
            <summary>
            Create index for statedate collection
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version07.EnqueuedJobMigration">
            <summary>
            Migrate enqueued jobs
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version08.PascalCaseRename">
            <summary>
            Renames all properties in Hangfire collections to use PascalCase.
            This is just in case Hangfire.Mong has been used with e.g. camelCase.
            Migrating of snake_case, kebab-case or other casing that introduces
            extra characters is not supported.
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.Migration.Steps.Version08.PascalCaseRename._propertyNames">
            <summary>
            A list of all property names used in schema version 8.
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version09.CreateSignalCollection">
            <summary>
            Create signal capped collection
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version10.UpdateSchemaCollection">
            <summary>
            Update the schema collection adding a database identifier
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version11.UseObjectIdForJob">
            <summary>
            Use ObjectId for jobs on job and jobQueue collections
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version12.CreateIndexes">
            <summary>
            Automatically create indexes
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version13.RemoveObsoleteCollections">
            <summary>
            Clean up obsolete collections
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version14.RemoveMergedHashDtos">
            <summary>
            Removes HashDto's which should have been removed in Version13 -> 'AddFieldsToHash'
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Steps.Version15.CreateUniqueLockIndex">
            <summary>
            Drops the existing index for the 'Resource' field of the distributed
            lock collection and creates a new one that guarantees uniqueness.
            This prevents a race case in which multiple Hangfire servers can 
            acquire a lock on the same resource simultaneously.
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.Backup.CollectionMongoBackupStrategy">
            <summary>
            No backup strategy
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.Backup.CollectionMongoBackupStrategy.Backup(Hangfire.Mongo.MongoStorageOptions,MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoSchema)">
            <summary>
            Backs up each hangfire.mongo collection before executing migration
            </summary>
            <param name="storageOptions"></param>
            <param name="database"></param>
            <param name="fromSchema"></param>
            <param name="toSchema"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.Backup.CollectionMongoBackupStrategy.BackupCollection(MongoDB.Driver.IMongoDatabase,System.String,System.String)">
            <summary>
            Backups the collection in database identified by collectionName.
            </summary>
            <param name="database">Referance to the mongo database.</param>
            <param name="collectionName">The name of the collection to backup.</param>
            <param name="backupCollectionName">Tha name of the backup collection.</param>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.Backup.MongoBackupStrategy">
            <summary>
            Strategy for backing up hangfire data before migration
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.Backup.MongoBackupStrategy.Backup(Hangfire.Mongo.MongoStorageOptions,MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoSchema)">
            <summary>
            Executes backup routine
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.Backup.NoneMongoBackupStrategy">
            <summary>
            No backup strategy
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.DropMongoMigrationStrategy">
            <summary>
            Drop DB before migration
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.DropMongoMigrationStrategy.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.DropMongoMigrationStrategy.#ctor(Hangfire.Mongo.Migration.IMongoMigrationContext)">
            <summary>
            ctor
            </summary>
            <param name="mongoMigrationContext"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.DropMongoMigrationStrategy.ExecuteMigration(MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoSchema)">
            <summary>
            Execute migration from "None"
            </summary>
            <param name="database"></param>
            <param name="fromSchema"></param>
            <param name="toSchema"></param>
        </member>
        <member name="M:Hangfire.Mongo.Migration.Strategies.DropMongoMigrationStrategy.ExecuteStrategy(MongoDB.Driver.IMongoDatabase,Hangfire.Mongo.MongoSchema,Hangfire.Mongo.MongoSchema)">
            <summary>
            drop all hangfire collections
            </summary>
            <param name="database"></param>
            <param name="fromSchema"></param>
            <param name="toSchema"></param>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.MigrateMongoMigrationStrategy">
            <summary>
            Implements the "Migrate" strategy.
            Migrate the hangfire collections from current schema to required
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.Migration.Strategies.ThrowMongoMigrationStrategy">
            <summary>
            Implements the "Throw" strategy.
            Not much to execute just throw an exception.
            We do not want to continue on an obsolete schema.
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions">
            <summary>
            Represents extensions to configure MongoDB storage for Hangfire
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,System.String)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string for Mongo database, for example 'mongodb://username:password@host:port/database'</param>
            <remarks>The connection string must include the database name</remarks>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,System.String,System.String)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string for Mongo database, for example 'mongodb://username:password@host:port'</param>
            <param name="databaseName">Name of database at Mongo server</param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string for Mongo database, for example 'mongodb://username:password@host:port/database'</param>
            <param name="storageOptions">Storage options</param>
            <exception cref="T:System.ArgumentException">Thrown if the connection string does not include the database name</exception>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,System.String,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string for Mongo database, for example 'mongodb://username:password@host:port'</param>
            <param name="databaseName">Name of database at Mongo server</param>
            <param name="storageOptions">Storage options</param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,MongoDB.Driver.MongoClientSettings,System.String)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="mongoClientSettings">Client settings for Mongo</param>
            <param name="databaseName">Name of database at Mongo server</param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,MongoDB.Driver.MongoClientSettings,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="mongoClientSettings">Client settings for Mongo</param>
            <param name="databaseName">Name of database at Mongo server</param>
            <param name="storageOptions">Storage options</param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoBootstrapperConfigurationExtensions.UseMongoStorage(Hangfire.IGlobalConfiguration,MongoDB.Driver.IMongoClient,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Configure Hangfire to use MongoDB storage
            </summary>
            <param name="configuration">Configuration</param>
            <param name="mongoClient">Client for Mongo</param>
            <param name="databaseName">Name of database at Mongo server</param>
            <param name="storageOptions">Storage options</param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.MongoConnectException">
            <summary>
            Thrown if Hangfire.Mongo is unable to connect to the database
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoConnectException.#ctor(Hangfire.Mongo.Database.HangfireDbContext,System.String,System.TimeSpan,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="dbContext"></param>
            <param name="connectionString"></param>
            <param name="connectionCheckTimeout"></param>
            <param name="e"></param>
        </member>
        <member name="T:Hangfire.Mongo.MongoConnection">
            <summary>
            MongoDB database connection for Hangfire
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoExpirationManager">
            <summary>
            Represents Hangfire expiration manager for Mongo database
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoExpirationManager.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Constructs expiration manager with one hour checking interval
            </summary>
            <param name="dbContext">MongoDB storage</param>
            <param name="options"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoExpirationManager.Execute(Hangfire.Server.BackgroundProcessContext)">
            <summary>
            Run expiration manager to remove outdated records
            </summary>
            <param name="context">Background processing context</param>
        </member>
        <member name="M:Hangfire.Mongo.MongoExpirationManager.Execute(System.Threading.CancellationToken)">
            <summary>
            Run expiration manager to remove outdated records
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Hangfire.Mongo.MongoFactory">
            <summary>
            Factory for creating dynamic instances
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoFactory.JobQueueSemaphore">
            <summary>
            JobQueueSemaphore instance used in Hangfire.Mongo
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateDbContext(MongoDB.Driver.IMongoClient,System.String,System.String)">
            <summary>
            Factory method to create HangfireDbContext instance
            </summary>
            <param name="mongoClient"></param>
            <param name="databaseName"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoJobFetcher(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoJobFetcher instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoConnection(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoConnection instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoWriteOnlyTransaction(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates new MongoWriteOnlyTransaction instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoDistributedLock(System.String,System.TimeSpan,Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates new MongoDistributedLock
            </summary>
            <param name="resource"></param>
            <param name="timeout"></param>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateFetchedJob(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,System.DateTime,MongoDB.Bson.ObjectId,MongoDB.Bson.ObjectId,System.String)">
            <summary>
            Create MongoFetchedJob instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <param name="fetchedAt"></param>
            <param name="id"></param>
            <param name="jobId"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoMonitoringApi(Hangfire.Mongo.Database.HangfireDbContext)">
            <summary>
            Create MongoMonitoringApi instance
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoNotificationObserver(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoNotificationObserver instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoJobQueueWatcher(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoJobQueue watcher instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoFactory.CreateMongoExpirationManager(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Creates MongoExpirationManager instance
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.MongoFetchedJob">
            <summary>
            Hangfire fetched job for Mongo database
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFetchedJob.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,System.DateTime,MongoDB.Bson.ObjectId,MongoDB.Bson.ObjectId,System.String)">
            <summary>
            Constructs fetched job by database connection, identifier, job ID and queue
            </summary>
            <param name="db">Database connection</param>
            <param name="storageOptions">storage options</param>
            <param name="fetchedAt"></param>
            <param name="id">Identifier</param>
            <param name="jobId">Job ID</param>
            <param name="queue">Queue name</param>
        </member>
        <member name="P:Hangfire.Mongo.MongoFetchedJob.FetchedAt">
            <summary>
            Timestamp job is fetched
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoFetchedJob.Id">
            <summary>
            Id of job
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoFetchedJob.JobId">
            <summary>
            Job ID
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoFetchedJob.Queue">
            <summary>
            Queue name
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFetchedJob.RemoveFromQueue">
            <summary>
            Removes fetched job from a queue
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFetchedJob.SetRemoved">
            <summary>
            Sets internal parameter to indicate if job is removed from queue
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFetchedJob.Requeue">
            <summary>
            Puts fetched job into a queue
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoFetchedJob.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoJobFetcher">
            <summary>
            Fetches job from DB
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobFetcher.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,Hangfire.Mongo.IJobQueueSemaphore)">
            <summary>
            ctor
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <param name="semaphore"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobFetcher.FetchNextJob(System.String[],System.Threading.CancellationToken)">
            <summary>
            Fetches net job, blocks until job is successfully fetched
            Queues are in prioritized order
            </summary>
            <param name="queues"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobFetcher.TryAllQueues(System.String[],System.Threading.CancellationToken)">
            <summary>
            Tries to get a job from db in queues defined priority
            </summary>
            <param name="queues"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobFetcher.TryGetEnqueuedJob(System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to fetch a job from specified queue 
            </summary>
            <param name="queue"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.MongoJobQueueWatcher">
            <summary>
            uses mongo feature watch to observe locks and added jobs
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoJobQueueWatcher.Logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoJobQueueWatcher.DbContext">
            <summary>
            DbContext
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoJobQueueWatcher.StorageOptions">
            <summary>
            StorageOptions
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoJobQueueWatcher.JobQueueSemaphore">
            <summary>
            JobQueue semaphore
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobQueueWatcher.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,Hangfire.Mongo.IJobQueueSemaphore)">
            <summary>
            ctor
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <param name="jobQueueSemaphore"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobQueueWatcher.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Hangfire.Mongo.MongoJobQueueWatcher.Execute(Hangfire.Server.BackgroundProcessContext)">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.Mongo.MongoJobUpdates">
            <summary>
            Updates for a specific job
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoJobUpdates.Set">
            <summary>
            Set updates
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoJobUpdates.Push">
            <summary>
            Push updates
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoJobUpdates.CreateUpdateModel(System.String)">
            <summary>
            Creates a UpdateOneModel with a filter for the given job id
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.MongoMigrationOptions">
            <summary>
            Represents options for MongoDB migration.
            Only forward migration is supported.
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoMigrationOptions.#ctor">
            <summary>
            Constructs migration options with default parameters.
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoMigrationOptions.MongoMigrationFactory">
            <summary>
            Factory which creates migration steps
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoMigrationOptions.BackupStrategy">
            <summary>
            Backup strategy
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoMigrationOptions.MigrationStrategy">
            <summary>
            Migration strategy
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoMigrationOptions.BackupPostfix">
            <summary>
            Collection backup name postfix for all Hangfire related collections.
            </summary>
            <remarks>
            The format for the backed up collection name is:
            {collection-name}.{schema-version}.{BackupPostfix}
            The format for the backed up database name is:
            {database-name}-{schema-version}-{BackupPostfix}
            </remarks>
        </member>
        <member name="T:Hangfire.Mongo.MongoMonitoringApi.SafeDictionary`2">
            <summary>
            Overloaded dictionary that doesn't throw if given an invalid key
            Fixes issues such as https://github.com/HangfireIO/Hangfire/issues/871
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoNotificationObserver">
            <summary>
            Observes if jobs are enqueued and signals 
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoNotificationObserver.#ctor(Hangfire.Mongo.Database.HangfireDbContext,Hangfire.Mongo.MongoStorageOptions,Hangfire.Mongo.IJobQueueSemaphore)">
            <summary>
            ctor
            </summary>
            <param name="dbContext"></param>
            <param name="storageOptions"></param>
            <param name="jobQueueSemaphore"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoNotificationObserver.Execute(System.Threading.CancellationToken)">
            <summary>
            Invoked by Hangfire.Core
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoNotificationObserver.Execute(Hangfire.Server.BackgroundProcessContext)">
            <summary>
            Invoked by Hangfire.Core
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Hangfire.Mongo.MongoNotificationObserver.HandleMongoCommandException(MongoDB.Driver.MongoCommandException,System.Threading.CancellationToken)">
            <summary>
            Default:
                If error contains "tailable cursor requested on non capped collection."
               then try to convert
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoNotificationObserver.GetFailureTimeoutMs">
            <summary>
            Gets timeout. adds 5 seconds for each call, maximizing at 60s
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hangfire.Mongo.MongoSchema">
            <summary>
            All the hangfire mongo schema versions ever used
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.None">
            <summary>
            No schema
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version04">
            <summary>
            Schema version 4
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version05">
            <summary>
            Schema version 5
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version06">
            <summary>
            Schema version 6
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version07">
            <summary>
            Schema version 7
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version08">
            <summary>
            Schema version 8
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version09">
            <summary>
            Schema version 9
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version10">
            <summary>
            Schema version 10
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version11">
            <summary>
            Schema version 11
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version12">
            <summary>
            Schema version 12
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version13">
            <summary>
            Schema Version 13
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version14">
            <summary>
            Schema Version 14
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version15">
            <summary>
            Schema Version 15
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version16">
            <summary>
            Schema Version 16
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version17">
            <summary>
            Schema Version 17
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version18">
            <summary>
            Schema Version 18
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version19">
            <summary>
            Schema Version 19
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version20">
            <summary>
            Schema Version 20
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoSchema.Version21">
            <summary>
            Schema Version 21
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoStorage">
            <summary>
            Hangfire Job Storage implementation for Mongo database
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoStorage.DatabaseName">
            <summary>
            Name of hangfire bb
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoStorage.MongoClient">
            <summary>
            Mongo client instance used for hangfire mongo
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoStorage.StorageOptions">
            <summary>
            Storage options
            </summary>
        </member>
        <member name="F:Hangfire.Mongo.MongoStorage.HangfireDbContext">
            <summary>
            DB context
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorage.Features">
            <summary>
            Enabled Hangfire features. To change enabled features, inherit this class and override 'HasFeature' method
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.#ctor(MongoDB.Driver.MongoClientSettings,System.String)">
            <summary>
            Constructs Job Storage by Mongo client settings and name
            </summary>
            <param name="mongoClientSettings">Client settings for MongoDB</param>
            <param name="databaseName">Database name</param>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.#ctor(MongoDB.Driver.MongoClientSettings,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Constructs Job Storage by Mongo client settings, name and options
            </summary>
            <param name="mongoClientSettings">Client settings for MongoDB</param>
            <param name="databaseName">Database name</param>
            <param name="storageOptions">Storage options</param>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.#ctor(MongoDB.Driver.IMongoClient,System.String,Hangfire.Mongo.MongoStorageOptions)">
            <summary>
            Constructs Job Storage by Mongo client, name and options
            </summary>
            <param name="mongoClient"></param>
            <param name="databaseName"></param>
            <param name="storageOptions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.HasFeature(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.GetMonitoringApi">
            <summary>
            Returns Monitoring API object
            </summary>
            <returns>Monitoring API object</returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.GetConnection">
            <summary>
            Returns storage connection
            </summary>
            <returns>Storage connection</returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.GetComponents">
            <summary>
            Returns collection of server components
            </summary>
            <returns>Collection of server components</returns>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.WriteOptionsToLog(Hangfire.Logging.ILog)">
            <summary>
            Writes storage options to log
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorage.ToString">
            <summary>
            Returns text representation of the object
            </summary>
        </member>
        <member name="T:Hangfire.Mongo.MongoStorageOptions">
            <summary>
            Represents Hangfire storage options for MongoDB implementation
            </summary>
        </member>
        <member name="M:Hangfire.Mongo.MongoStorageOptions.#ctor">
            <summary>
            Constructs storage options with default parameters
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.CheckQueuedJobsStrategy">
            <summary>
            Strategy for checking for enqueued jobs
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.Factory">
            <summary>
            Factory instance
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.Prefix">
            <summary>
            Collection name prefix for all Hangfire related collections
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.QueuePollInterval">
            <summary>
            Poll interval for queue
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.SupportsCappedCollection">
            <summary>
            Indicates if the underlying storage supports capped collections
            default set to true.
            MongoStorage will throw NotSupportedException if 'SupportsCappedCollection' is false
            and 'CheckQueuedJobsStrategy' is TailNotificationsCollection
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.InvisibilityTimeout">
            <summary>
            Invisibility timeout
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.DistributedLockLifetime">
            <summary>
            Lifetime of distributed lock
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.MigrationLockTimeout">
            <summary>
            Timeout for other process to wait before timing out when waiting for migration to complete
            default = 30 seconds 
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.ClientId">
            <summary>
            Client identifier
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.CheckConnection">
            <summary>
            Ping database on startup to check connection, if false Hangfire.Mongo will not ping
            the db and try to connect to the db using the given MongoClientSettings
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.ByPassMigration">
            <summary>
            Bypass migrations, use at your own risk :)
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.ConnectionCheckTimeout">
            <summary>
            Time before cancelling ping to mongo server, if 'CheckConnection' is false, this value will be ignored
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.JobExpirationCheckInterval">
            <summary>
            Expiration check interval for jobs
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.CountersAggregateInterval">
            <summary>
            Counters interval
            </summary>
        </member>
        <member name="P:Hangfire.Mongo.MongoStorageOptions.MigrationOptions">
            <summary>
            The options used if migration is needed
            </summary>
        </member>
    </members>
</doc>
